
/*
=======================================
  Description: Master Thesis
  Author: Andr√© Bourbonnais (ndreey)
  email: andbou95@gmail.com
=======================================
*/

params.timestamp = new Date().format('yyyyMMdd-HH-mm-ss')

manifest {
  homePage                      = "https://github.com/ndreey/stammerula2025"
  description                   = "stammerula"
  mainScript                    = "main.nf"
  version                       = "1.0.0"
  author                        = "ndreey"
}

// Shared settings
params {
    tracedir                     = "pipeline_info"
}

// Image executor
apptainer {
    enabled                      = true
    autoMounts                   = true
}

// Local and SLURM profile
profiles {
    local {
        executor {
            name = "local"
            cpus = 10
        }
        
        process {
            errorStrategy = 'finish'
        }
    }

    slurm {
        executor {
            name = "slurm"
            queueSize = 50
            submitRateLimit = "30/1min"
            pollInterval = "30 sec"
        }
        
        process {
            queue = 'shared'
            // Use conditional clusterOptions to handle missing project parameter gracefully
            clusterOptions = { params.slurm?.project ? "-A ${params.slurm.project}" : "" }
            errorStrategy = "finish"

            // Add default resource limits
            time = '24.h'
            memory = '8.GB'
            cpus = 1
        }
    }
}

// Workflow process settings
process {
    // Default shell settings
    shell = ['/bin/bash', '-euo', 'pipefail']

    cache = "lenient"

    withLabel: index {
        memory                      = "230.GB"
        cpus                        = 2
        time                        = "24.h"
        queue                       = "memory"
    }

    withLabel: stats {
        memory                      = "16.GB"
        cpus                        = 8
        time                        = "4.h"
        maxRetries                  = 3
        errorStrategy               = "retry"
    }

    withLabel: qc {
        memory                       = "8.GB"
        cpus                         = 2
        time                         = "2.h"
    }

    withLabel: trim {
        memory                       = "12.GB"
        cpus                         = 4
        time                         = "4.h"
    }

    withLabel: decon {
        memory                       = "56.GB"
        cpus                         = 8
        time                         = { (8 * task.attempt).h }
        queue                        = "shared"
        maxRetries                   = 4
        errorStrategy                = "retry"

    }

    withLabel: metamdbg {
        memory                       = "56.GB"
        cpus                         = 16
        time                         = "6.h"
        queue                        = "shared"
    }

    withLabel: megahit {
        memory                       = "200.GB"
        cpus                         = 24
        time                         = "5.h"
        queue                        = "main"
    }

    withLabel: metaWRAP {
        memory                    = "64.GB"
        cpus                      = 24
        time                      = "12.h"
        queue                     = "shared"
    }
    
    withLabel: gtdbtk {
        memory                    = "220.GB"
        cpus                      = 12
        time                      = "3.h"
        queue                     = "main"
        containerOptions = "--bind ${params.db.GTDBtk}:/gtdbtk_db --bind ${params.db.GTDBtk_mash}:/gtdbtk_mash_db"
    }

    withLabel: checkm2 {
        memory                    = "100.GB"
        cpus                      = 12
        time                      = "2.h"
        queue                     = "shared"
        containerOptions          = "--bind ${params.db.checkm2}:/checkm2_db"
    }

    withLabel: busco {
        memory                    = "16.GB"
        cpus                      = 8
        time                      = "1.h"
        queue                     = "shared"
    }

    withLabel: bakta {
        memory                    = "50.GB"
        cpus                      = 12
        time                      = "4.h"
        queue                     = "shared"
        containerOptions          = "--bind ${params.db.bakta}:/bakta_db"
    }


    // PublishDir configurations using params from params file
    withName: FASTQC_RAW {
        publishDir = [
            path: "${params.res.qc}/fastqc-raw",
            mode: "symlink"
        ]
    }

    withName: FASTQC_CCS {
        publishDir = [
            path: "${params.res.qc}/fastqc-ccs-raw",
            mode: "symlink"
        ]
    }

    withName: MULTIQC_RAW {
        publishDir = [
            path: "${params.res.qc}/multiqc-raw",
            mode: "symlink"
        ]
    }

    withName: MULTIQC_CCS {
        publishDir = [
            path: "${params.res.qc}/multiqc-ccs-raw",
            mode: "symlink"
        ]
    }

    withName: FASTQC_TRIM {
        publishDir = [
            path: "${params.res.qc}/fastqc-trim",
            mode: "symlink"
        ]
    }

    withName: MULTIQC_TRIM {
        publishDir = [
            path: "${params.res.qc}/multiqc-trim",
            mode: "symlink"
        ]
    }

    withName: MULTIQC_FASTP {
        publishDir = [
            path: "${params.res.qc}/multiqc-fastp",
            mode: "symlink"
        ]
    }
}

// Reports
timeline {
    enabled             = true
    file                = "${params.tracedir}/${params.timestamp}_timeline.html"
}

report {
    enabled             = true
    file                = "${params.tracedir}/${params.timestamp}_report.html"
}

trace {
    enabled             = true
    file                = "${params.tracedir}/${params.timestamp}_trace.txt"
}

dag {
    enabled             = true
    file                = "${params.tracedir}/DAG/${params.timestamp}_dag.png"
}